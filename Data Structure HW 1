QUESTION NO: 2
//To generate 100 random numbers, you can use the "rand()" function from the "stdlib.h" library.
//To sort the numbers from largest to smallest, you can use the "qsort()" function from the "stdlib.h" library.
//Finally, to print the sorted numbers, you can use the "printf()" function from the "stdio.h" library.
#include <stdio.h>
#include <stdlib.h>

// Function to compare two integers
int compare(const void *a, const void *b) {
    int int1 = *((int*)a);
    int int2 = *((int*)b);
    return (int2 - int1);
}

int main() {
    int i, num[100];

    // Generate 100 random numbers and add them to the array
    for (i = 0; i < 100; i++) {
        num[i] = rand() % 1000;
    }

    // Sort the numbers from largest to smallest
    qsort(num, 100, sizeof(int), compare);

    // Print the sorted numbers
    for (i = 0; i < 100; i++) {
        printf("%d ", num[i]);
    }

    return 0;
}


QUESTION NO:4
//Create a struct to store student number, name, and age.
#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int number;
    char name[50];
    int age;
} Student;
//Write a function that takes the student list and prints the student information.
void printStudents(Student *head) {
    int count = 0;
    while (head != NULL) {
        printf("%d- %s %d\n", head->number, head->name, head->age);
        head = head->next;
        count++;
    }
    printf("Total number of students: %d\n", count);
}
//Now, use this function to print the student information on the screen.
int main() {
    Student *head = (Student*) malloc(sizeof(Student));
    head->number = 201;
    strcpy(head->name, "Saliha");
    head->age = 27;

    Student *second = (Student*) malloc(sizeof(Student));
    second->number = 203;
    strcpy(second->name, "Ece");
    second->age = 19;

    head->next = second;
    second->next = NULL;

    printStudents(head);

    return 0;
}
//The output will be:
1- Saliha 27
2- Ece 19
Total number of students: 2


QUESTION NO:5
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
    int id;
    char name[50];
    int grade;
    char class[50];
} Student;
//Define the function that searches records by student name in the list.
void searchStudentsByName(Student* students, int numStudents, char* searchName) {
    int i, found = 0;
    for (i = 0; i < numStudents; i++) {
        if (strcmp(students[i].name, searchName) == 0) {
            printf("ID: %d, Name: %s, Grade: %d, Class: %s\n", students[i].id, students[i].name, students[i].grade, students[i].class);
            found++;
        }
    }
    if (found == 0) {
        printf("No student found with the name: %s\n", searchName);
    }
}
//use this function in your main program to search for a student by name
int main() {
    Student students[] = {
        {1, "John", 90, "A"},
        {2, "Bob", 85, "B"},
        {3, "Alice", 95, "A"},
        {4, "Eve", 70, "C"}
    };
    int numStudents = sizeof(students) / sizeof(students[0]);

    char searchName[] = "Alice";
    searchStudentsByName(students, numStudents, searchName);

    return 0;
}

QUESTION NO:6
//First, let's define the structure of a node.
typedef struct Node {
    int id;
    char name[100];
    float grade;
    struct Node *next;
} Node;
//Next, let's create the function that deletes the next node from the node with the searched student name.
void deleteNextNode(Node **head, int id) {
    if (*head == NULL) return;

    Node *current = *head;
    while (current->next != NULL) {
        if (current->id == id && current->next != NULL) {
            Node *nextNode = current->next;
            current->next = nextNode->next;
            free(nextNode);
            return;
        }
        current = current->next;
    }
}
//To demonstrate the usage of this function, let's create a simple linked list with 3 nodes and call the "deleteNextNode" function.
int main() {
    Node *head = NULL;
    Node *first = createNode(1, "Alice", 85.0);
    Node *second = createNode(2, "Bob", 90.0);
    Node *third = createNode(3, "Charlie", 88.0);

    appendNode(&head, first);
    appendNode(&head, second);
    appendNode(&head, third);

    deleteNextNode(&head, 2);

    printList(head);

    return 0;
}



QUESTION NO:7

//Define a structure to represent the records.
#include <stdio.h>
#include <string.h>

typedef struct {
    char name[50];
    int age;
} Record;

//Define the function that finds the longest name in the list.
void printLongestName(Record* records, int numRecords) {
    int i, longestNameIndex = 0;
    int longestNameLength = strlen(records[0].name);

    for (i = 1; i < numRecords; i++) {
        int currentNameLength = strlen(records[i].name);
        if (currentNameLength > longestNameLength) {
            longestNameLength = currentNameLength;
            longestNameIndex = i;
        }
    }

    printf("the longest name in the list: %s\n", records[longestNameIndex].name);
    printf("Length : %d\n", longestNameLength);
}

//use this function in your main program to find the longest name in the list. 
int main() {
    Record records[] = {
        {"Abdurrahmangazi", 35},
        {"Almofiras", 32},
        {"Jaferian", 40}
    };
    int numRecords = sizeof(records) / sizeof(records[0]);

    printLongestName(records, numRecords);

    return 0;
}
//run this program, it will find the longest name in the list and print the name and its length. In this example, the output will be:
the longest name in the list: Abdurrahmangazi
Length : 15
